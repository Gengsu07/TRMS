[theme]
base="dark"
primaryColor="#bd93f9"
backgroundColor="#282a36"
secondaryBackgroundColor="#44475a"
textColor="#fff"
#textColor="#f8f8f2"

[theme]
primaryColor="#ffca19"
backgroundColor="#181818"
secondaryBackgroundColor="#212121"
textColor="#ffffff"

#color kemenkeu
#005FAC
#ffc91b

#color DJP
28377a
ffca19


Sektor MoM PerSektor
            top4_kat = data_sektor.nlargest(6, columns="BRUTO2023")
            top4_kat = top4_kat["NM_KATEGORI"].tolist()

            sektor_mom = data_sektor_awal[1]
            sektor_mom = sektor_mom[["NM_KATEGORI", "BULANBAYAR", "BRUTO2023"]]
            sektor_mom = sektor_mom[sektor_mom["NM_KATEGORI"] != ""]
            sektor_mom.fillna(0, inplace=True)
            sektor_mom = (
                sektor_mom.groupby(["NM_KATEGORI", "BULANBAYAR"]).sum().reset_index()
            )
            sektor_mom = sektor_mom.sort_values(
                by=["NM_KATEGORI", "BULANBAYAR"], ascending=True
            )

            sektor_mom_top4 = sektor_mom[sektor_mom["NM_KATEGORI"].isin(top4_kat)]
            st.subheader("Month Over Month Growth 6 Sektor Terbesar")

            rows = ceil(len(sektor_mom_top4["NM_KATEGORI"].unique()) / 3)
            container = {}
            counter = 1
            for row in range(1, rows + 1):
                container[row] = st.container()
                with container[row]:
                    cekisi = len(sektor_mom_top4["NM_KATEGORI"].unique())
                    cek_baris = ceil(cekisi / 3)
                    sisa4 = cekisi % 3
                    if row < cek_baris:
                        col = st.columns(3)
                    elif sisa4 == 1:
                        col = st.columns([50, 50])
                    elif sisa4 == 2:
                        col = st.columns(3)
                    for x in range(1, 4):
                        if counter <= len(sektor_mom_top4["NM_KATEGORI"].unique()):
                            with col[x - 1]:
                                data_col = sektor_mom_top4[
                                    sektor_mom_top4["NM_KATEGORI"]
                                    == top4_kat[counter - 1]
                                ]
                                data_col["MoM_GROWTH"] = (
                                    data_col["BRUTO2023"].pct_change(periods=1)
                                ) * 100
                                data_col["WARNA"] = data_col["MoM_GROWTH"].apply(
                                    lambda x: "Merah" if x < 0 else "Hijau"
                                )
                                mom_chart = px.bar(
                                    data_col,
                                    x="MoM_GROWTH",
                                    y="BULANBAYAR",
                                    color="WARNA",
                                    orientation="h",
                                    text_auto=".2f",
                                    color_discrete_sequence=["#02275d", "#F96666"],
                                )
                                mom_chart.update_layout(
                                    xaxis=dict(visible=False),
                                    yaxis=dict(visible=False, autorange="reversed"),
                                    # yaxis=dict(tickfont=dict(color="#fff")),
                                    title=dict(
                                        text=f"{top4_kat[counter-1]}",
                                        # font=dict(color="#4d5b69"),
                                        x=0.25,
                                        y=0.95,
                                        font=dict(size=14, color="slategrey"),
                                    ),
                                    showlegend=False,
                                    bargap=0.2,
                                    paper_bgcolor=background_mom,
                                    plot_bgcolor="rgba(0, 0, 0, 0)",
                                )

                                st.plotly_chart(mom_chart, use_container_width=True)

                                # st.dataframe(data_col)
                        counter += 1

        except:
            st.subheader("ðŸª‚ No Data AvailableðŸª‚")
        # data
        try:
            colsek = st.columns(2)

            data_sektor_table = sektor_yoy(filter, filter22, includewp=True)[2]
            data_sektor_table = data_sektor_table[
                [
                    "NAMA_WP",
                    "NM_KATEGORI",
                    "BRUTO2022",
                    "BRUTO2023",
                    "NETTO2022",
                    "NETTO2023",
                    "NaikBruto",
                    "NaikNetto",
                    "TumbuhBruto",
                ]
            ]
            with colsek[0]:
                with chart_container(data_sektor_table):
                    st.dataframe(
                        filter_dataframe(data_sektor_table, key=unique_key(5)),
                        use_container_width=True,
                        hide_index=True,
                    )
            with colsek[1]:
                with chart_container(sektor_mom):
                    st.dataframe(
                        filter_dataframe(sektor_mom, key=unique_key(6)),
                        use_container_width=True,
                        hide_index=True,
                    )

            st.markdown(
                """<hr style="height:1px;border:none;color:#FFFFFF;background-color:#ffc91b;" /> """,
                unsafe_allow_html=True,
            )

Sektor_MOM Per Jenis
            top4_map = jenis_pajak9.nlargest(6, columns="BRUTO2023")
            top4_map = top4_map["MAP"].tolist()

            map_mom = map_mom(filter)

            map_mom = map_mom[map_mom["MAP"] != ""]
            map_mom.fillna(0, inplace=True)
            map_mom = map_mom.groupby(["MAP", "BULANBAYAR"]).sum().reset_index()
            map_mom = map_mom.sort_values(by=["MAP", "BULANBAYAR"], ascending=True)
            # map_mom["MoM_GROWTH"] = (map_mom["NOMINAL"].pct_change(periods=1)) * 100
            map_mom_top4 = map_mom[map_mom["MAP"].isin(top4_map)]

            st.subheader("Month Over Month Growth 6 Jenis Pajak Terbesar")

            rows = ceil(len(map_mom_top4["MAP"].unique()) / 3)
            container = {}
            counter = 1
            for row in range(1, rows + 1):
                container[row] = st.container()
                with container[row]:
                    cekisi = len(map_mom_top4["MAP"].unique())
                    cek_baris = ceil(cekisi / 3)
                    sisa4 = cekisi % 3
                    if row < cek_baris:
                        col = st.columns(3)
                    elif sisa4 == 1:
                        col = st.columns([33.3])
                    elif sisa4 == 2:
                        col = st.columns(3)
                    for x in range(1, 4):
                        if counter <= len(map_mom_top4["MAP"].unique()):
                            with col[x - 1]:
                                data_col = map_mom_top4[
                                    map_mom_top4["MAP"] == top4_map[counter - 1]
                                ]
                                # st.write(counter)
                                # st.write(top4_map[counter - 1])

                                data_col["MoM_GROWTH"] = (
                                    data_col["NOMINAL"].pct_change(periods=1)
                                ) * 100
                                data_col["WARNA"] = data_col["MoM_GROWTH"].apply(
                                    lambda x: "Merah" if x < 0 else "Hijau"
                                )
                                mom_chart = px.bar(
                                    data_col,
                                    x="MoM_GROWTH",
                                    y="BULANBAYAR",
                                    color="WARNA",
                                    orientation="h",
                                    text_auto=".2f",
                                    color_discrete_sequence=["#02275d", "#F96666"],
                                )
                                mom_chart.update_layout(
                                    xaxis=dict(visible=False),
                                    yaxis=dict(visible=False, autorange="reversed"),
                                    # yaxis=dict(tickfont=dict(color="#fff")),
                                    title=dict(
                                        text=f"{top4_map[counter - 1]}",
                                        # font=dict(color="#4d5b69"),
                                        x=0.25,
                                        y=0.95,
                                        font=dict(size=14, color="slategrey"),
                                    ),
                                    showlegend=False,
                                    bargap=0.2,
                                    paper_bgcolor=background_mom,
                                    plot_bgcolor="rgba(0, 0, 0, 0)",
                                )

                                st.plotly_chart(mom_chart, use_container_width=True)

                        counter += 1


kjs
kjs = kjs(filter)
            kjs["BRUTO_M"] = kjs["BRUTO"] / 1000000000
            kjs["Kontribusi"] = (kjs["BRUTO"] / kjs["BRUTO"].sum()) * 100
            kjschart = px.treemap(
                kjs,
                labels="KDBAYAR",
                values="BRUTO_M",
                path=["KDBAYAR"],
                color="MAP",
                color_discrete_sequence=px.colors.qualitative.Safe,
                height=560,
                custom_data=["Kontribusi"],
                title="Proporsi Penerimaan per Kode Jenis Setoran",
            )
            hovertemplate = (
                "<b>%{label}</b><br><br>"
                + "KDBAYAR: %{id}<br>"
                + "%{customdata[0]:,.2f} persen<br>"
                + "BRUTO: %{value:,.1f}M <extra></extra>"
            )
            kjschart.update_traces(hovertemplate=hovertemplate)

            kjschart.update_layout(
                paper_bgcolor=background,
                plot_bgcolor="rgba(0, 0, 0, 0)",
                xaxis_title="",
                yaxis_title="",
                title=dict(
                    font=dict(color="slategrey", size=26),
                    x=0.5,
                    y=0.95,
                ),
            )
            with chart_container(kjs):
                st.plotly_chart(kjschart, use_container_width=True)

            jenis_wp, *_ = jns_pajak(filter, filter22, includewp=True)
            with chart_container(jenis_wp.reset_index()):
                # jenis_pajak = jenis_pajak[
                #     ["NAMA_WP", "MAP", "TAHUNBAYAR", "JENIS_WP","2022", "KONTRIBUSI2022", "2023", "KONTRIBUSI2023", "TUMBUH"]
                # ]
                st.dataframe(
                    filter_dataframe(jenis_wp, key=unique_key(45)),
                    use_container_width=True,
                    hide_index=True,
                )

            st.markdown(
                """<hr style="height:1px;border:none;color:#FFFFFF;background-color:#ffc91b;" /> """,
                unsafe_allow_html=True,
            )
        except:
            st.subheader("ðŸª‚ No Data AvailableðŸª‚")


 kjs = kjs(filter)
            kjs["BRUTO_M"] = kjs["BRUTO"] / 1000000000
            kjs["Kontribusi"] = (kjs["BRUTO"] / kjs["BRUTO"].sum()) * 100
            kjschart = px.treemap(
                kjs,
                labels="KDBAYAR",
                values="BRUTO_M",
                path=["KDBAYAR"],
                color="MAP",
                color_discrete_sequence=px.colors.qualitative.Safe,
                height=560,
                custom_data=["Kontribusi"],
                title="Proporsi Penerimaan per Kode Jenis Setoran",
            )
            hovertemplate = (
                "<b>%{label}</b><br><br>"
                + "KDBAYAR: %{id}<br>"
                + "%{customdata[0]:,.2f} persen<br>"
                + "BRUTO: %{value:,.1f}M <extra></extra>"
            )
            kjschart.update_traces(hovertemplate=hovertemplate)

            kjschart.update_layout(
                paper_bgcolor=background,
                plot_bgcolor="rgba(0, 0, 0, 0)",
                xaxis_title="",
                yaxis_title="",
                title=dict(
                    font=dict(color="slategrey", size=26),
                    x=0.5,
                    y=0.95,
                ),
            )
            with chart_container(kjs):
                st.plotly_chart(kjschart, use_container_width=True)

            jenis_wp, *_ = jns_pajak(filter, filter22, includewp=True)
            with chart_container(jenis_wp.reset_index()):
                # jenis_pajak = jenis_pajak[
                #     ["NAMA_WP", "MAP", "TAHUNBAYAR", "JENIS_WP","2022", "KONTRIBUSI2022", "2023", "KONTRIBUSI2023", "TUMBUH"]
                # ]
                st.dataframe(
                    filter_dataframe(jenis_wp, key=unique_key(45)),
                    use_container_width=True,
                    hide_index=True,
                )

            st.markdown(
                """<hr style="height:1px;border:none;color:#FFFFFF;background-color:#ffc91b;" /> """,
                unsafe_allow_html=True,
            )
        except:
            st.subheader("ðŸª‚ No Data AvailableðŸª‚")



Cluster 
try:
            capaian = cluster(filter, filter22, kpp)
            capaian_table = capaian.copy()
            capaian_table.loc[:, "TARGET2023":"REALISASI2023"] = capaian_table.loc[
                :, "TARGET2023":"REALISASI2023"
            ].applymap(lambda x: "{:,.2f}M".format(x / 1000000000))
            capaian_table.loc[:, "capaian":] = capaian_table.loc[
                :, "capaian":
            ].applymap(lambda x: "{:,.2f}%".format(x))
            # capaian_table = ff.create_table(capaian_table)
            avg_capaian = capaian["capaian"].mean()
            avg_tumbuh = capaian["tumbuh"].mean()

            cluster_chart = px.scatter(
                capaian,
                x="capaian",
                y="tumbuh",
                text="ADMIN",
                color_continuous_scale=px.colors.diverging.RdBu,
            )
            hovertemplate = (
                "<b>%{text}</b><br><br>"
                + "Capaian: %{x:,.2f}persen <br>"
                + "Tumbuh: %{y:,.2f}persen <extra></extra>"
            )
            cluster_chart.update_traces(
                marker=dict(size=20, color="#F86F03"),
                textposition="bottom center",
                textfont=dict(color="#F86F03", size=14),
                hovertemplate=hovertemplate,
            )
            cluster_chart.add_hline(
                y=avg_tumbuh,
                line_dash="dash",
                line_color="red",
                name="Rata2 Tumbuh",
            )
            cluster_chart.add_vline(
                x=avg_capaian,
                line_dash="dash",
                line_color="red",
                name="Rata2 Capaian",
            )
            cluster_chart.add_trace(
                go.Scatter(
                    x=[avg_capaian],
                    y=[avg_tumbuh],
                    mode="markers",
                    marker=dict(color="green", symbol="x", size=20),
                    name="Rata-rata",
                )
            )
            cluster_chart.update_layout(
                title=dict(
                    text="Clustering Capaian & Tumbuh Unit Kerja(Bruto)",
                    font=dict(color="slategrey", size=26),
                    x=0.3,
                    y=0.95,
                ),
                # paper_bgcolor="#F6FFF8",
                plot_bgcolor="rgba(0, 0, 0, 0)",
            )
            with chart_container(capaian_table):
                st.plotly_chart(cluster_chart, use_container_width=True)
        except:
            st.subheader("ðŸª‚ No Data AvailableðŸª‚")

        try:
            top10kpp = top10kpp(filter_date, filter_date22, filter_cat)
            top10kpp = top10kpp[~top10kpp["ADMIN"].isin(["007", "097"])]
            avg_realisasi = top10kpp["CY"].mean()
            avg_tumbuh_kpp = top10kpp["TUMBUH"].mean()
            cluster_top10kpp = px.scatter(
                top10kpp,
                x="CY",
                y="TUMBUH",
                # text="NAMA_WP",
                color="ADMIN",
                color_continuous_scale=px.colors.diverging.RdBu,
                custom_data=["NAMA_WP", "PY"],
            )
            hovertemplate = (
                "<b>%{customdata[0]}</b><br><br>"
                + "Current Year: %{x:,.0f} <br>"
                + "Prior Year: %{customdata[1]:,.0f}<br>"
                + "Tumbuh: %{y:,.2f}persen <extra></extra>"
            )
            cluster_top10kpp.update_traces(
                marker=dict(size=10),
                textposition="bottom center",
                textfont=dict(color="#F86F03", size=14),
                hovertemplate=hovertemplate,
            )
            cluster_top10kpp.add_hline(
                y=avg_tumbuh_kpp,
                line_dash="dash",
                line_color="red",
                name="Rata2 Tumbuh",
            )
            cluster_top10kpp.add_vline(
                x=avg_realisasi,
                line_dash="dash",
                line_color="red",
                name="Rata2 Capaian",
            )
            cluster_top10kpp.add_trace(
                go.Scatter(
                    x=[avg_realisasi],
                    y=[avg_tumbuh_kpp],
                    mode="markers",
                    marker=dict(color="green", symbol="x", size=20),
                    name="Rata-rata",
                )
            )
            cluster_top10kpp.update_layout(
                title=dict(
                    text="Clustering 10 WP Besar per KPP Pratama(Bruto)",
                    font=dict(color="slategrey", size=26),
                    x=0.3,
                    y=0.95,
                ),
                xaxis={"visible": False},
                yaxis={"visible": False},
                # paper_bgcolor="#F6FFF8",
                plot_bgcolor="rgba(0, 0, 0, 0)",
            )

            with chart_container(top10kpp):
                st.plotly_chart(cluster_top10kpp, use_container_width=True)
        except:
            st.subheader("ðŸª‚ No Data AvailableðŸª‚")



# renpen_realisasi
renpen_realisasi = conn.query('select * from renpen_realisasi')
renpen_realisasi = renpen_realisasi.groupby(
    ['BULAN', 'JENIS'])['JUMLAH'].sum().reset_index()
renpen_realisasi['text'] = renpen_realisasi['JUMLAH'].apply(lambda x: "{:,.1f}M".format(
    x/1000000000))
linechart = px.line(renpen_realisasi, x='BULAN',
                    y='JUMLAH', color='JENIS', text='text', width=960)
linechart.update_layout(xaxis_title='', yaxis_title='',
                        yaxis={'visible': False},
                        xaxis={
                            'dtick': 0.1,
                            'tickmode': 'array',
                            'tickvals': [x for x in range(1, 13)],
                            'ticktext': [calendar.month_name[i] for i in range(1, 13)]
                        }, autosize=True)

with chart_container(renpen_realisasi):
    st.plotly_chart(linechart)


## HOUSEHOLD CORPORATE
SELECT 
wp.JENIS_WP , sum(pp.NOMINAL) 
FROM ppm_pkm pp
LEFT JOIN ( 
		SELECT
		NPWP15, JENIS_WP
		FROM 
		registrasi.sidjp_masterfile 
)wp
ON pp.NPWP  = wp.NPWP15 
WHERE pp.DATEBAYAR BETWEEN '20230401' AND  '20230431'
GROUP BY wp.JENIS_WP 



sektor_bruto = go.Bar(
        x=data_sektor["BRUTO"],
        y=data_sektor["NM_KATEGORI"],
        name="BRUTO",
        orientation="h",
        text=data_sektor["bruto_text"],
        marker=dict(color="#ffc91b"),
        textangle=0,
        textposition="auto",
    )

    sektor_net = go.Bar(
        x=data_sektor["NETTO"],
        y=data_sektor["NM_KATEGORI"],
        name="NETTO",
        orientation="h",
        text=data_sektor["net_text"],
        marker=dict(color="#005FAC"),
        textangle=0,
    )

    # sektor_kontrib = go.Funnel(
    #     x=data_sektor["kontribusi"],
    #     y=data_sektor["NM_KATEGORI"],
    #     name="BRUTO",
    #     text=data_sektor["kontrib_persen"],
    #     marker=dict(color="#005FAC"),
    #     textangle=0,
    #     textposition="inside",
    # )

    sektor_bar = make_subplots(
        rows=1,
        cols=2,
        shared_yaxes=True,
        subplot_titles=[f"Neto:{netto_val}", f"Bruto:{bruto_val}"],
    )

    sektor_bar.add_trace(sektor_net, row=1, col=1)
    sektor_bar.add_trace(sektor_bruto, row=1, col=2)
    # sektor_bar.add_trace(sektor_kontrib, row=1, col=3)



    data_sektor_awal = prep.sektor(filter)
    data_sektor_awal = (
        data_sektor_awal.groupby(["NM_KATEGORI"])
        .sum()
        .reset_index()
        .sort_values(by="NETTO", ascending=False)
        .reset_index()
        .drop(columns="index")
    )

    data_sektor9 = data_sektor_awal.nlargest(10, "NETTO")
    data_sektor_lain = data_sektor_awal[
        ~data_sektor_awal["NM_KATEGORI"].isin(data_sektor9["NM_KATEGORI"])
    ]
    data_sektor_lain = pd.DataFrame(
        [["LAINNYA", data_sektor_lain["NETTO"].sum(), data_sektor_lain["BRUTO"].sum()]],
        columns=["NM_KATEGORI", "NETTO", "BRUTO"],
    )
    data_sektor = pd.concat([data_sektor9, data_sektor_lain], axis=0, ignore_index=True)



     with col_tahun[0]:
        if filter:
            data23 = conn.query(
                f"""select sum("NOMINAL") from ppmpkm p where {filter} and p."KET" !='SPMKP' """
            )["sum"].sum()
        else:
            data23 = conn.query(
                f"""select sum("NOMINAL") from ppmpkm p where {filter_gabungan[0][0] +'and'+ filter_gabungan[0][1]} and p."KET" !='SPMKP' """
            )["sum"].sum()
        if (data23 / 1000000000000) > 1:
            st.metric("Bruto", "{:,.1f}T".format(data23 / 1000000000000))
        else:
            st.metric("Bruto", "{:,.1f}M".format(data23 / 1000000000))
    with col_tahun[1]:
        if filter:
            data22 = conn.query(
                f'select sum("NOMINAL") from ppmpkm p where {filter22}'
            )["sum"].sum()
        else:
            data22 = conn.query(
                f"""select sum("NOMINAL") from ppmpkm p where {filter_gabungan[1][0] +'and'+ filter_gabungan[1][1]} """
            )["sum"].sum()
        if (data22 / 1000000000000) > 1:
            st.metric("2022", "{:,.1f}T".format(data22 / 1000000000000))
        else:
            st.metric("2022", "{:,.1f}M".format(data22 / 1000000000))
    with col_tahun[2]:
        selisih = data23 - data22
        if (selisih) > 1000000000000:
            st.metric("Kenaikan", "{:,.1f}T".format(selisih / 1000000000000))
        else:
            st.metric("Kenaikan", "{:,.1f}M".format(selisih / 1000000000))
    with col_tahun[3]:
        selisih = data23 - data22
        if (data22 == 0) | (selisih == 0):
            tumbuh = 0
        else:
            tumbuh = selisih / data22
        st.metric("Tumbuh", "{:.1f}%".format(tumbuh * 100))
    with col_tahun[4]:
        persentase = data23 / 27601733880000
        st.metric("Kontrib Target Kanwil", "{:.2f}%".format(persentase * 100))


    # timeseries_chart = make_subplots(
    #     rows=1, cols=2, subplot_titles=["Kumulatif", "Bulanan"]
    # )
    # timeseries_chart.add_trace(
    #     go.Scatter(
    #         x=linedata["BULANBAYAR"],
    #         y=linedata["sum"],
    #         line=dict(color="#005FAC"),
    #         text=linedata["text"],
    #         mode="lines",
    #     ),
    #     row=1,
    #     col=1,
    # )


     map_bar = px.bar(
        jenis_pajak9,
        x="MAP",
        y="BRUTO",
        color="TAHUNBAYAR",
        text="tbruto",
        title="Per Jenis(Bruto)",
        width=1024,
        height=640,
        color_discrete_sequence=["#ffc91b", "#005FAC"],
        barmode="group",
    )
    map_bar.update_layout(
        xaxis_title="",
        yaxis_title="",
        yaxis={"visible": False, "minor_showgrid": False},
        title={"x": 0.5, "font_size": 24},
        autosize=True,
    )
    map_bar.update_traces(
        textfont_size=12, textangle=0, textposition="outside", cliponaxis=False
    )



table
    go.Figure(
            data=[
                go.Table(
                    header=dict(
                        values=list(tumbuh_bulanan.columns),
                        fill_color="#005FAC",
                        line_color="gray",
                        align=["center"] * tumbuh_bulanan.shape[1],
                        font=dict(color="white", size=16),
                        height=40,
                    ),
                    cells=dict(
                        values=[tumbuh_bulanan[x] for x in tumbuh_bulanan.columns],
                        fill_color="lavender",
                        align="left",
                        font_size=14,
                        height=30,
                    ),
                )
            ]
        )
        tumbuh.update_layout(
            height=640,
            width=960,
            title=dict(
                text="Tumbuh Bruto & Netto Per Bulan",
                x=0.5,
                y=0.95,
                font=dict(size=26),
            ),
        )

# Per Sektor Butterfly
sektor_chart = make_subplots(
        rows=1,
        cols=2,
        shared_yaxes=True,
        horizontal_spacing=0,
    )
    sektor23 = go.Bar(
        x=data_sektor["2023"] / 1000000000,
        y=data_sektor["NM_KATEGORI"],
        name="2023",
        orientation="h",
        text=data_sektor["kontrib_persen23"],
        texttemplate="%{x:,.1f}M <br> (%{text})",
        textposition="auto",
        marker=dict(color="#005FAC"),
        textangle=0,
        base=0,
    )

    sektor22 = go.Bar(
        x=data_sektor["2022"] / 1000000000,
        y=data_sektor["NM_KATEGORI"],
        name="2022",
        orientation="h",
        text=data_sektor["kontrib_persen22"],
        textposition="auto",
        texttemplate="%{x:,.1f}M<br> (%{text})",
        marker=dict(color="#ffc91b"),
        textangle=0,
        base=0,
    )
    sektor_data = [sektor22, sektor23]
    sektor_layout = go.Layout(barmode="group")
    sektor_bar = go.Figure(data=sektor_data, layout=sektor_layout)

    # sektor_bar.update_xaxes(visible=False)

    # kontribusi_bar = go.Bar(
    #     x=data_sektor["kontribusi"],
    #     y=data_sektor["NM_KATEGORI"],
    #     name="kontribusi",
    #     orientation="h",
    #     text=data_sektor["kontrib_persen"],
    #     textposition="auto",
    #     marker=dict(color="#499894"),
    #     textangle=0,
    #     base=0,
    #     showlegend=False,
    # )
    # kontrib_layout = go.Layout()
    # kontribusi_chart = go.Figure(data=kontribusi_bar, layout=kontrib_layout)

    # kontribusi_chart.update_xaxes(visible=False)
    sektor_chart.add_trace(sektor_bar.data[0], row=1, col=1)
    sektor_chart.add_trace(sektor_bar.data[1], row=1, col=2)
    sektor_chart.update_xaxes(
        row=1, col=1, showticklabels=False
    )  # autorange="reversed"
    sektor_chart.update_xaxes(row=1, col=2, showticklabels=False)